{"version":3,"sources":["scripts/main.js"],"names":["gameBoard","document","querySelector","controlsButton","messageStart","messageWin","messageLose","getRandomInt","min","max","Math","floor","random","initMatrix","size","Array","from","length","fill","getTransposedMatrix","matrix","map","_","i","row","getElementsMatrix","querySelectorAll","startGame","SIZE","elements","cells","gameScore","renderNumber","num","cell","className","textContent","renderNumbers","j","addNewNumbers","newNumber","getMergedLine","line","merged","filter","el","splice","isLose","flat","some","slice","addEventListener","keydownEvent","e","stateBefore","JSON","stringify","key","forEach","mergedLine","reversedLine","reverse","classList","remove","removeEventListener","app","target","add"],"mappings":";AAAA,aA2LG,SAAA,EAAA,GAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,IAAA,SAAA,IAAA,MAAA,IAAA,UAAA,wIAAA,SAAA,EAAA,EAAA,GAAA,GAAA,EAAA,CAAA,GAAA,iBAAA,EAAA,OAAA,EAAA,EAAA,GAAA,IAAA,EAAA,OAAA,UAAA,SAAA,KAAA,GAAA,MAAA,GAAA,GAAA,MAAA,WAAA,GAAA,EAAA,cAAA,EAAA,EAAA,YAAA,MAAA,QAAA,GAAA,QAAA,EAAA,MAAA,KAAA,GAAA,cAAA,GAAA,2CAAA,KAAA,GAAA,EAAA,EAAA,QAAA,GAAA,SAAA,EAAA,GAAA,GAAA,oBAAA,QAAA,OAAA,YAAA,OAAA,GAAA,OAAA,MAAA,KAAA,GAAA,SAAA,EAAA,GAAA,GAAA,MAAA,QAAA,GAAA,OAAA,EAAA,GAAA,SAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,UAAA,EAAA,EAAA,QAAA,IAAA,IAAA,EAAA,EAAA,EAAA,IAAA,MAAA,GAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,GAAA,OAAA,EAxLH,IAAMA,EAAYC,SAASC,cAAc,eACnCC,EAAiBF,SAASC,cAAc,WACxCE,EAAeH,SAASC,cAAc,kBACtCG,EAAaJ,SAASC,cAAc,gBACpCI,EAAcL,SAASC,cAAc,iBAErCK,EAAe,SAACC,EAAKC,GAClBC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAEhDK,EAAa,SAACC,GAASC,OAAAA,MAAMC,KACjC,CAAEC,OAAQH,GAAQ,WAAMC,OAAAA,MAAMD,GAAMI,KAAK,MAErCC,EAAsB,SAACC,GAAWA,OAAAA,EAAO,GAAGC,IAChD,SAACC,EAAGC,GAAMH,OAAAA,EAAOC,IAAI,SAAAG,GAAOA,OAAAA,EAAID,QAE5BE,EAAoB,WACrBV,OAAAA,MAAMC,KAAKf,SAASyB,iBAAiB,cAAe,SAAAF,GACvDT,OAAAA,MAAMC,KAAKQ,EAAIE,iBAAiB,mBAG5BC,EAAY,WACVC,IAEAC,EAAWJ,IACbK,EAAQjB,EAHC,GAITkB,EAAY,EAEVC,EAAe,SAACC,EAAKT,EAAKU,GAC9BL,EAASL,GAAKU,GAAMC,UAAsCF,0BAAAA,OAAAA,GAC1DJ,EAASL,GAAKU,GAAME,YAAcH,GAG9BI,EAAgB,WACf,IAAA,IAAId,EAAI,EAAGA,EAAIM,EAASZ,OAAQM,IAC9B,IAAA,IAAIe,EAAI,EAAGA,EAAIT,EAASZ,OAAQqB,IAC/BR,EAAMP,GAAGe,GACXN,EAAaF,EAAMP,GAAGe,GAAIf,EAAGe,IAI/BT,EAASN,GAAGe,GAAGH,UAAY,aAC3BN,EAASN,GAAGe,GAAGF,YAAc,KAK7BG,EAAgB,WACb,OAAM,CACLf,IAAAA,EAAMjB,EAAa,EAAGqB,GACtBM,EAAO3B,EAAa,EAAGqB,GAEzBE,GAAqB,IAArBA,EAAMN,GAAKU,GAAa,CACpBM,IAAAA,EAAY9B,KAAKE,SAAW,GAAM,EAAI,EAK5C,OAHAkB,EAAMN,GAAKU,GAAQM,OACnBR,EAAaQ,EAAWhB,EAAKU,MAO7BO,EAAgB,SAACC,GAGhB,IAFCC,IAAAA,EAASD,EAAKE,OAAO,SAACC,GAAOA,OAAAA,IAE1BtB,EAAI,EAAGA,EAAIoB,EAAO1B,OAAS,EAAGM,IACjCoB,EAAOpB,KAAOoB,EAAOpB,EAAI,KAC3BoB,EAAOpB,GAAK,EAAIoB,EAAOpB,GACvBoB,EAAOG,OAAOvB,EAAI,EAAG,GACrBQ,GAAaY,EAAOpB,IAIboB,MAAAA,GAAAA,OAAAA,EAAAA,GAAW5B,EAAAA,MApDX,EAoDwB4B,EAAO1B,QAAQC,KAAK,MAgDnD6B,EAAS,WACN,OATmBjB,EAAMkB,OAAOC,KAAK,SAACJ,GAAO,OAACA,MAE/Bf,EAAMmB,KAAK,SAACzB,EAAKD,GACvCC,OAAAA,EAAI0B,MAAM,GAAI,GAAGD,KAAK,SAACJ,EAAIP,GACzBO,OAAAA,KAAQf,EAAMP,EAAI,IAAMO,EAAMP,EAAI,GAAGe,SA4CzCD,IAEK,IAAA,IAAId,EAAI,EAAGA,EAAI,EAAGA,IACrBgB,IAGFtC,SAASkD,iBAAiB,UA1CL,SAAfC,EAAgBC,GACdC,IAAAA,EAAcC,KAAKC,UAAU1B,GAE3BuB,OAAAA,EAAEI,KACH,IAAA,YApDP3B,EAAM4B,QAAQ,SAAChB,EAAMnB,GACboC,IAAAA,EAAalB,EAAcC,GAEjCZ,EAAMP,GAAKoC,IAmDT,MACG,IAAA,aA/CP7B,EAAM4B,QAAQ,SAAChB,EAAMnB,GACbqC,IAAAA,EAAe,EAAIlB,GAAMmB,UACzBF,EAAalB,EAAcmB,GAAcC,UAE/C/B,EAAMP,GAAKoC,IA6CT,MACG,IAAA,UAzCP7B,EAAQX,EAAoBW,GAAOT,IAAI,SAAAqB,GAAQD,OAAAA,EAAcC,KAC7DZ,EAAQX,EAAoBW,GA0CxB,MACG,IAAA,YAvCPA,EAAQX,EAAoBW,GAAOT,IAAI,SAAAqB,GAC/BkB,IAAAA,EAAelB,EAAKQ,QAAQW,UAG3BF,OAFYlB,EAAcmB,GAEfC,YAGpB/B,EAAQX,EAAoBW,GAuCxBwB,IAFeC,KAAKC,UAAU1B,KAGhCO,IACAE,IACAvC,EAAUoC,YAAcL,GAtCnBD,EAAMkB,OAAOC,KAAK,SAACJ,GAAOA,OAxFb,OAwFaA,KA0C/BxC,EAAWyD,UAAUC,OAAO,UAG1BhB,MACFzC,EAAYwD,UAAUC,OAAO,UAC7B9D,SAAS+D,oBAAoB,UAAWZ,OAaxCa,EAAM,WACV9D,EAAegD,iBAAiB,QAAS,SAACE,GACxCA,EAAEa,OAAOJ,UAAUC,OAAO,SAC1BV,EAAEa,OAAOJ,UAAUK,IAAI,WACvBd,EAAEa,OAAO9B,YAAc,UAEvBhC,EAAa0D,UAAUK,IAAI,UAC3B7D,EAAYwD,UAAUK,IAAI,UAC1B9D,EAAWyD,UAAUK,IAAI,UAEzBxC,OAIJsC","file":"main.f3ca1cfe.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n// write your code here\nconst gameBoard = document.querySelector('.game-score');\nconst controlsButton = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\nconst initMatrix = (size) => Array.from(\n  { length: size }, () => Array(size).fill(0));\n\nconst getTransposedMatrix = (matrix) => matrix[0].map(\n  (_, i) => matrix.map(row => row[i]));\n\nconst getElementsMatrix = (\n) => Array.from(document.querySelectorAll('.field-row'), row =>\n  Array.from(row.querySelectorAll('.field-cell'))\n);\n\nconst startGame = () => {\n  const SIZE = 4;\n  const NUMBER_TO_WIN = 2048;\n  const elements = getElementsMatrix();\n  let cells = initMatrix(SIZE);\n  let gameScore = 0;\n\n  const renderNumber = (num, row, cell) => {\n    elements[row][cell].className = `field-cell field-cell--${num}`;\n    elements[row][cell].textContent = num;\n  };\n\n  const renderNumbers = () => {\n    for (let i = 0; i < elements.length; i++) {\n      for (let j = 0; j < elements.length; j++) {\n        if (cells[i][j]) {\n          renderNumber(cells[i][j], i, j);\n          continue;\n        }\n\n        elements[i][j].className = 'field-cell';\n        elements[i][j].textContent = '';\n      }\n    }\n  };\n\n  const addNewNumbers = () => {\n    while (true) {\n      const row = getRandomInt(0, SIZE - 1);\n      const cell = getRandomInt(0, SIZE - 1);\n\n      if (cells[row][cell] === 0) {\n        const newNumber = Math.random() < 0.1 ? 4 : 2;\n\n        cells[row][cell] = newNumber;\n        renderNumber(newNumber, row, cell);\n\n        return;\n      }\n    }\n  };\n\n  const getMergedLine = (line) => {\n    const merged = line.filter((el) => el);\n\n    for (let i = 0; i < merged.length - 1; i++) {\n      if (merged[i] === merged[i + 1]) {\n        merged[i] = 2 * merged[i];\n        merged.splice(i + 1, 1);\n        gameScore += merged[i];\n      }\n    }\n\n    return [...merged, ...Array(SIZE - merged.length).fill(0)];\n  };\n\n  const mergeLeft = () => {\n    cells.forEach((line, i) => {\n      const mergedLine = getMergedLine(line);\n\n      cells[i] = mergedLine;\n    });\n  };\n\n  const mergeRight = () => {\n    cells.forEach((line, i) => {\n      const reversedLine = [...line].reverse();\n      const mergedLine = getMergedLine(reversedLine).reverse();\n\n      cells[i] = mergedLine;\n    });\n  };\n\n  const mergeUp = () => {\n    cells = getTransposedMatrix(cells).map(line => getMergedLine(line));\n    cells = getTransposedMatrix(cells);\n  };\n\n  const mergeDown = () => {\n    cells = getTransposedMatrix(cells).map(line => {\n      const reversedLine = line.slice().reverse();\n      const mergedLine = getMergedLine(reversedLine);\n\n      return mergedLine.reverse();\n    });\n\n    cells = getTransposedMatrix(cells);\n  };\n\n  const isWon = () => {\n    return cells.flat().some((el) => el === NUMBER_TO_WIN);\n  };\n\n  const hasEmptyCells = () => cells.flat().some((el) => !el);\n\n  const canMerged = () => cells.some((row, i) =>\n    row.slice(0, -1).some((el, j) =>\n      el === (cells[i + 1] && cells[i + 1][j])\n    )\n  );\n\n  const isLose = () => {\n    return !hasEmptyCells() && !canMerged();\n  };\n\n  const keydownEvent = (e) => {\n    const stateBefore = JSON.stringify(cells);\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        mergeLeft();\n        break;\n      case 'ArrowRight':\n        mergeRight();\n        break;\n      case 'ArrowUp':\n        mergeUp();\n        break;\n      case 'ArrowDown':\n        mergeDown();\n        break;\n    }\n\n    const stateAfter = JSON.stringify(cells);\n\n    if (stateBefore !== stateAfter) {\n      renderNumbers();\n      addNewNumbers();\n      gameBoard.textContent = gameScore;\n    }\n\n    if (isWon()) {\n      messageWin.classList.remove('hidden');\n    }\n\n    if (isLose()) {\n      messageLose.classList.remove('hidden');\n      document.removeEventListener('keydown', keydownEvent);\n    }\n  };\n\n  renderNumbers();\n\n  for (let i = 0; i < 2; i++) {\n    addNewNumbers();\n  }\n\n  document.addEventListener('keydown', keydownEvent);\n};\n\nconst app = () => {\n  controlsButton.addEventListener('click', (e) => {\n    e.target.classList.remove('start');\n    e.target.classList.add('restart');\n    e.target.textContent = 'Restart';\n\n    messageStart.classList.add('hidden');\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n\n    startGame();\n  });\n};\n\napp();\n"]}